// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Decode - store target
    And(a=instruction[15],b=instruction[5],out=desta);
    And(a=instruction[15],b=instruction[4],out=destd);
    And(a=instruction[15],b=instruction[3],out=writeM);

    Not(in=instruction[15],out=ainstr);
    Or(a=ainstr,b=desta,out=loada);

    // Decode - jmp
    And(a=instruction[2],b=ng,out=j1);
    And(a=instruction[1],b=zr,out=j2);
    Or(a=ng,b=zr,out=notpos);
    Not(in=notpos,out=pos);
    And(a=instruction[0],b=pos,out=j3);
    Or(a=j1,b=j2,out=j12);
    Or(a=j12,b=j3,out=j123);
    And(a=j123,b=instruction[15],out=jmp);
    Not(in=jmp,out=notjmp);

    // Mux
    Mux16(a[0..14]=instruction[0..14],a[15]=false,b=aluout,sel=instruction[15],out=aregin);
    Mux16(a=aregout,b=inM,sel=instruction[12],out=secondop);

    // A register
    ARegister(in=aregin,load=loada,out[0..14]=addressM,out=aregout);
    // D register
    DRegister(in=aluout,load=destd,out=dregout);
    // PC
    PC(in=aregout,load=jmp,inc=notjmp,reset=reset,out[0..14]=pc);

    ALU(
        // IN
        // 16-bit inputs:
        x=dregout, 
        y=secondop,
        // Control bits:
        zx=instruction[11], // Zero the x input
        nx=instruction[10], // Negate the x input
        zy=instruction[9], // Zero the y input
        ny=instruction[8], // Negate the y input
        f=instruction[7],  // Function code: 1 for add, 0 for and
        no=instruction[6], // Negate the out output

        // OUT 
        // 16-bit output
        out=aluout,
        out=outM,
        // ALU output flags
        zr=zr, // 1 if out=0, 0 otherwise
        ng=ng // 1 if out<0, 0 otherwise
    );
}